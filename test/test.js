const assert = require('assert')
const validateDate = require('../lib/validateDate')

describe ('validateDate', () => {
  it ('Strings should be accepted', () => {
    assert.strictEqual(validateDate('1', '1', '2022').error, false)
    assert.strictEqual(validateDate('8', '2', '1990').error, false)
  })
  it ('Numbers should be accepted', () => {
    assert.strictEqual(validateDate(1, 1, 2022).error, false)
    assert.strictEqual(validateDate(8, 2, 1990).error, false)
  })
  it ('2-digit dates gain 2000 years', () => {
    assert.strictEqual(validateDate(1, 1, 22).date.getFullYear(), 2022)
    assert.strictEqual(validateDate(8, 2, 90).date.getFullYear(), 2090)
  })
  it ('Months must be between 1 and 12', () => {
    assert.strictEqual(validateDate(1, 13, 22).error, true)
    assert.strictEqual(validateDate(1, 0, 22).error, true)
    assert.strictEqual(validateDate(1, 13, 22).errors[0].reason, "'Date' month must be between 1 and 12")
    assert.strictEqual(validateDate(1, 0, 22).errors[0].reason, "'Date' month must be between 1 and 12")
  })
  it ('Month lengths must be correct', () => {
    assert.strictEqual(validateDate(32, 1, 22).errors[0].reason, "'Date' day must be between 1 and 31 in the month of January")
    assert.strictEqual(validateDate(29, 2, 22).errors[0].reason, "'Date' day must be between 1 and 28 in the month of February")
    assert.strictEqual(validateDate(32, 3, 22).errors[0].reason, "'Date' day must be between 1 and 31 in the month of March")
    assert.strictEqual(validateDate(31, 4, 22).errors[0].reason, "'Date' day must be between 1 and 30 in the month of April")
    assert.strictEqual(validateDate(32, 5, 22).errors[0].reason, "'Date' day must be between 1 and 31 in the month of May")
    assert.strictEqual(validateDate(31, 6, 22).errors[0].reason, "'Date' day must be between 1 and 30 in the month of June")
    assert.strictEqual(validateDate(32, 7, 22).errors[0].reason, "'Date' day must be between 1 and 31 in the month of July")
    assert.strictEqual(validateDate(32, 8, 22).errors[0].reason, "'Date' day must be between 1 and 31 in the month of August")
    assert.strictEqual(validateDate(31, 9, 22).errors[0].reason, "'Date' day must be between 1 and 30 in the month of September")
    assert.strictEqual(validateDate(32, 10, 22).errors[0].reason, "'Date' day must be between 1 and 31 in the month of October")
    assert.strictEqual(validateDate(31, 11, 22).errors[0].reason, "'Date' day must be between 1 and 30 in the month of November")
    assert.strictEqual(validateDate(32, 12, 22).errors[0].reason, "'Date' day must be between 1 and 31 in the month of December")
  })
  it ('Account for leap years', () => {
    assert.strictEqual(validateDate(29, 2, 16).error, false)
    assert.strictEqual(validateDate(29, 2, 17).error, true)
    assert.strictEqual(validateDate(29, 2, 18).error, true)
    assert.strictEqual(validateDate(29, 2, 19).error, true)
    assert.strictEqual(validateDate(29, 2, 20).error, false)
    assert.strictEqual(validateDate(29, 2, 21).error, true)
    assert.strictEqual(validateDate(29, 2, 22).error, true)
    assert.strictEqual(validateDate(29, 2, 23).error, true)
    assert.strictEqual(validateDate(29, 2, 24).error, false)
  })
  it ('Catch non-numeric values', () => {
    assert.strictEqual(validateDate(8, 'Feb', 1990).error, true)
    assert.strictEqual(validateDate('8th', 2, 1990).errors[0].reason, "'Date' day must be a number")
    assert.strictEqual(validateDate(8, 'Feb', 1990).errors[0].reason, "'Date' month must be a number")
    assert.strictEqual(validateDate(8, 2, '9ty').errors[0].reason, "'Date' year must be a number")
  })
  it ('Catch multiple errors', () => {
    assert.strictEqual(validateDate(8, 'Feb', 1990).errors.length, 1)
    assert.strictEqual(validateDate('8th', 'Feb', 1990).errors.length, 2)
    assert.strictEqual(validateDate('8th', 'Feb', '9ty').errors.length, 3)
    assert.strictEqual(validateDate('8th', 'Feb', '9ty').errors.length, 3)
  })
  it ('Return the index of the error', () => {
    assert.strictEqual(validateDate('8th', 2, 1990).errors[0].index, 0)
    assert.strictEqual(validateDate(8, 'Feb', 1990).errors[0].index, 1)
    assert.strictEqual(validateDate(8, 2, '9ty').errors[0].index, 2)
  })
})
